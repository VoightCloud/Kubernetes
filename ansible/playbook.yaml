# You would run this on the Kubernetes Control Plane
# Important: Run this first!

- name: Initialize Kubernetes Control Plane
  hosts: controlplane

  tasks:
    - name: Common Tasks
      include_tasks: all-playbook.yaml

    - name: Get kube join command
      command: kubeadm token create --print-join-command
      register: join_command
      become: true
      ignore_errors: true

    - name: Initialize kubernetes if not already running
      block:
        - name: Initialize the Kubernetes cluster using kubeadm
          become: true
          command: kubeadm init --pod-network-cidr=100.64.0.0/16 --service-cidr=100.65.0.0/16

        - name: Create .kube directory for ubuntu
          file:
            path: /home/ubuntu/.kube
            state: directory
            owner: ubuntu
            group: ubuntu
            mode: '0700'

        - name: Copy kubeconfig
          become: true
          copy:
            src: /etc/kubernetes/admin.conf
            dest: /home/ubuntu/.kube/config
            remote_src: yes
            owner: ubuntu
            group: ubuntu
            mode: '0700'

        - name: Apply short tolerations
          become: true
          command:  kubeadm init phase control-plane apiserver --config=./files//kubernetes-tolerations-seconds.yaml

        - name: Get Helm
          become: true
          unarchive:
            remote_src: yes
            src: https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz
            dest: ~/
          when: ansible_architecture == "x86_64"

        - name: Get Helm
          become: true
          unarchive:
            remote_src: yes
            src: https://get.helm.sh/helm-v3.5.4-linux-arm64.tar.gz
            dest: ~/
          when: ansible_architecture == "aarch64"

        - name: Move Helm package
          command: "{{ item }}"
          become: true
          when: ansible_architecture == "aarch64"
          args:
            warn: false
          with_items:
            - mv ~/linux-arm64/helm /usr/local/bin/helm
            - rm -r ~/linux-arm64/

        - name: Move Helm package
          command: "{{ item }}"
          become: true
          when: ansible_architecture == "x86_64"
          args:
            warn: false
          with_items:
            - mv ~/linux-amd64/helm /usr/local/bin/helm
            - rm -r ~/linux-amd64/

        - name: Install stable repos
          kubernetes.core.helm_repository:
            name: stable
            repo_url: "https://charts.helm.sh/stable"

        - name: Install nfs repos
          kubernetes.core.helm_repository:
            name: nfs-subdir-external-provisioner
            repo_url: "https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner"

        - name: Install Descheduler Repo
          kubernetes.core.helm_repository:
            name: descheduler
            repo_url: "helm repo add descheduler https://kubernetes-sigs.github.io/descheduler"

        - name: Update helm repos
          command: helm repo update

        - name: Copy flannel-values.yaml
          copy:
            src: files/flannel-values.yaml
            dest: /tmp/

        - name: Copy metallb-values.yaml
          copy:
            src: files/metallb-values.yaml
            dest: /tmp/

        - name: Copy nas-values.yaml
          copy:
            src: files/nas-values.yaml
            dest: /tmp/

        - name: Install flannel
          command: "{{ item }}"
          with_items:
            - kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml -f /tmp/flannel-values.yaml

        - name: Install Metal-LB
          command: helm install -n default metallb stable/metallb -f /tmp/metallb-values.yaml

        - name: Let k8s catch up
          command: sleep 10

        - name: Apply storage chart
          command: helm install storage-nas nfs-subdir-external-provisioner/nfs-subdir-external-provisioner  -f /tmp/nas-values.yaml

        - name: Apply Descheduler
          command: helm install -n kube-system descheduler descheduler/descheduler

      when: join_command.rc == 1

    - name: Copy join command to local file
      become: false
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

- name: Initialize Kubernetes Nodes
  hosts: workers
  become: True
  tasks:
    - name: Common Tasks
      include_tasks: all-playbook.yaml

    - name: Determine kubelet status
      command: "sh -c \"systemctl status kubelet|grep active\""
      register: has_kubelet
      ignore_errors: true

    - name: Apply join commands when k8s isn't running yet
      block:
        - name: Copy the join command to server location
          copy:
            src: join-command
            dest: /tmp/
            mode: 0755

        - name: Join the node to cluster
          command: sh /tmp/join-command

        - name: Clean up the join command
          file:
            path: /tmp/join-command
            state: absent
      when: has_kubelet == 1

    - name: Add www group
      become: true
      group:
        name: www-data
        state: present
        gid: 33

    - name: Add Kubernetes user
      become: true
      user:
        name: kubernetes
        comment: Kubernetes User
        uid: 1050
        groups: docker,www-data
        append: yes
